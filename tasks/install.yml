---
- name: Ensure Vault group is created
  group:
    name: "{{ vault_group }}"
    state: present

- name: Ensure Vault user is created
  user:
    name: "{{ vault_user }}"
    comment: "{{ vault_user_comment }}"
    group: "{{ vault_group }}"
    system: true

- name: Ensure remote vault temporary dir exists
  file:
    path: /tmp/vault
    state: directory
  when: vault_install_required == true

- name: Ensure vault package checksum file is not present
  file:
    path: "/tmp/vault/{{ vault_shasums }}"
    state: absent

- name: Ensure vault package file is not present
  file:
    path: "/tmp/vault/{{ vault_pkg }}"
    state: absent

- name: Get Vault package checksum file
  get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "/tmp/vault/{{ vault_shasums }}"
  when: vault_install_required == true

- name: Get Vault package checksum
  shell: "grep {{ vault_pkg }} /tmp/vault/{{ vault_shasums }}"
  register: vault_sha256
  when: vault_install_required == true

- name: "Download Vault"
  get_url:
    url: "{{ vault_zip_url }}"
    dest: "/tmp/vault/{{ vault_pkg }}"
    checksum: "sha256:{{ vault_sha256.stdout.split(' ')|first }}"
    timeout: "42"
  when: vault_install_required == true

- name: Unarchive Vault and install binary
  unarchive:
    remote_src: true
    src: "/tmp/vault/{{ vault_pkg }}"
    dest: "{{ vault_bin_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
  notify: Restart vault
  when: vault_install_required == true

- name: Install autocomplete for vault user
  #shell: "su {{ vault_user }} -c 'vault -autocomplete-install'"
  shell: "{{ vault_bin_path }}/vault -autocomplete-install"
  args:
    executable: /bin/bash
  become_user: "{{ vault_user }}"
  ignore_errors: yes
  when: vault_install_required == true

- name: Insert http(s) export in dotfile
  lineinfile:
    path: "/home/{{ vault_user }}/.bashrc"
    line: "export VAULT_ADDR='{{ vault_tls_disable | ternary('http', 'https') }}://{{ inventory_hostname }}:{{ vault_port }}'"
    create: true

- name: Set cap_ipc_lock=+ep on {{ vault_bin_path }}/vault
  capabilities:
    path: "{{ vault_bin_path }}/vault"
    capability: cap_ipc_lock=+ep
    state: present
  ignore_errors: true
  when: vault_install_required == true

- name: Ensure vault directories have been created
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
  with_items:
    - "{{ vault_config_path }}"
    - "{{ vault_plugin_path }}"
    - "{{ vault_data_path }}"
    - "{{ vault_log_path }}"
    - "{{ vault_run_path }}"

- block:
  - name: Ensure TLS directory has been created
    file:
      dest: "{{ vault_tls_config_path }}"
      state: directory
      owner: "{{ vault_user }}"
      group: "{{ vault_group }}"
    when: vault_tls_disable == "false"

  - name: Ensure Vault SSL certificate and key are on the server
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ vault_user }}"
      group: "{{ vault_group }}"
      mode: "{{ item.mode }}"
    with_items:
      - src: "{{ vault_tls_src_files }}/{{ vault_tls_client_ca_file }}"
        dest: "{{ vault_tls_config_path }}/{{ vault_tls_client_ca_file }}"
        mode: "0644"
      - src: "{{ vault_tls_src_files }}/{{ vault_tls_client_ca_file }}"
        dest: "{{ vault_tls_cert_key_store }}/{{ vault_tls_client_ca_file }}"
        mode: "0644"
      - src: "{{ vault_tls_src_files }}/{{ vault_tls_cert_file }}"
        dest: "{{ vault_tls_config_path }}/{{ vault_tls_cert_file }}"
        mode: "0644"
      - src: "{{ vault_tls_src_files }}/{{ vault_tls_key_file }}"
        dest: "{{ vault_tls_config_path }}/{{ vault_tls_key_file }}"
        mode: "0600"

  - name: Add TLS CA certificate to OS keystore
    command: update-ca-trust extract
      
  when: vault_tls_disable == "false"

- name: Ensure Vault SSL CA certificate is on the server (for tls client authentication)
  copy:
    src: "{{ vault_tls_src_files }}/{{ vault_tls_ca_file }}"
    dest: "{{ vault_tls_config_path }}/{{ vault_tls_ca_file }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0644"
  when: vault_tls_require_and_verify_client_cert | bool

- name: Debian init script
  template:
    src: "{{ vault_debian_init_template }}"
    dest: /etc/init.d/vault
    owner: root
    group: root
    mode: "0755"
  when:
    - not ansible_service_mgr == "systemd"
    - ansible_os_family == "Debian"

- name: Extract systemd version
  shell: |
    set -o pipefail
    systemctl --version systemd | head -n 1 | cut -d' ' -f2
  args:
    executable: /bin/bash
  changed_when: false
  check_mode: false
  register: systemd_version
  when:
    - ansible_service_mgr == "systemd"

- name: Systemd unit
  template:
    src: "{{ vault_systemd_template }}"
    dest: /lib/systemd/system/vault.service
    force: yes
    owner: root
    group: root
    mode: "0644"
  register: systemd_unit
  when:
    - ansible_service_mgr == "systemd"
    - systemd_version is defined

- name: Reload systemd
  systemd:
    daemon-reload: true
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - systemd_version is defined
    - systemd_unit is changed

- name: Enable service vault
  service:
    name: vault
    enabled: yes

- name: Cleanup
  file:
    path: "/tmp/vault"
    state: absent