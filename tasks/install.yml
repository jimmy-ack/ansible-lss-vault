---
- name: Ensure Vault group is created
  group:
    name: "{{ vault_group }}"
    state: present

- name: Ensure Vault user is created
  user:
    name: "{{ vault_user }}"
    comment: "{{ vault_user_comment }}"
    group: "{{ vault_group }}"
    system: true

- name: Ensure remote vault temporary dir exists
  file:
    path: /tmp/vault
    state: directory

- name: Ensure vault package checksum file is not present
  file:
    path: "/tmp/vault/{{ vault_shasums }}"
    state: absent

- name: Ensure vault package file is not present
  file:
    path: "/tmp/vault/{{ vault_pkg }}"
    state: absent

- name: Get Vault package checksum file
  get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "/tmp/vault/{{ vault_shasums }}"

- name: Get Vault package checksum
  shell: "grep {{ vault_pkg }} /tmp/vault/{{ vault_shasums }}"
  register: vault_sha256

- name: "Download Vault"
  get_url:
    url: "{{ vault_zip_url }}"
    dest: "/tmp/vault/{{ vault_pkg }}"
    checksum: "sha256:{{ vault_sha256.stdout.split(' ')|first }}"
    timeout: "42"

- name: Unarchive Vault and install binary
  unarchive:
    remote_src: true
    src: "/tmp/vault/{{ vault_pkg }}"
    dest: "{{ vault_bin_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
  notify: Restart vault

- name: Check Vault mlock capability
  command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  changed_when: false 
  ignore_errors: true
  register: vault_mlock_capability

- name: Enable non root mlock capability
  command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  when: vault_mlock_capability is failed

- name: Ensure vault directories have been created
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
  with_items:
    - "{{ vault_config_path }}"
    - "{{ vault_plugin_path }}"
    - "{{ vault_data_path }}"
    - "{{ vault_log_path }}"
    - "{{ vault_run_path }}"

- name: Debian init script
  template:
    src: "{{ vault_debian_init_template }}"
    dest: /etc/init.d/vault
    owner: root
    group: root
    mode: "0755"
  when:
    - not ansible_service_mgr == "systemd"
    - ansible_os_family == "Debian"

- name: Extract systemd version
  shell: |
    set -o pipefail
    systemctl --version systemd | head -n 1 | cut -d' ' -f2
  args:
    executable: /bin/bash
  changed_when: false
  check_mode: false
  register: systemd_version
  when:
    - ansible_service_mgr == "systemd"

- name: Systemd unit
  template:
    src: "{{ vault_systemd_template }}"
    dest: /lib/systemd/system/vault.service
    force: yes
    owner: root
    group: root
    mode: "0644"
  register: systemd_unit
  when:
    - ansible_service_mgr == "systemd"
    - systemd_version is defined

- name: Reload systemd
  systemd:
    daemon-reload: true
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - systemd_version is defined
    - systemd_unit is changed

- name: Enable service vault
  service:
    name: vault
    enabled: yes

- name: Cleanup
  file:
    path: "/tmp/vault"
    state: absent